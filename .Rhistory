map <- ggplot() +
geom_sf(data = state_total, aes(fill = total_value, text = paste("State:", STUSPS, "<br>", "Total Value (Million Dollars):", sprintf("%.2f", total_value))), color = "black") +
scale_fill_continuous(name = "Total Value (Million Dollars)", labels = scales::comma) +
labs(title = paste("Total Value of", commodity, "Exported from Each State")) +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(map)
}
# Output the initial map
output$choropleth_map <- renderPlotly({
create_choropleth_map(input$commodity)
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(df)
write.csv(df, file = "./data/cleaned_data.csv")
write.csv(df, file = "./data/cleaned_data.csv", index = FALSE)
write.csv(df, file = "./data/cleaned_data.csv", row.names = FALSE)
unique(df$sctg2)
library(MASS)
library(caret)
library(tidyverse)
# Load the Boston dataset
data(Boston)
boston_df <- as.data.frame(Boston)
View(boston_df)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Save features and target variable as X and y
X <- boston_df %>% select(-crim, -high_crime)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Save features and target variable as X and y
X <- boston_df %>% select(-crim, -high_crime)
# Loading packages and data
library(MASS)
library(caret)
library(dplyr)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Save features and target variable as X and y
X <- boston_df %>% select(-crim, -high_crime)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Save features and target variable as X and y
X <- boston_df %>% dplyr::select(-crim, -high_crime)
y <- boston_df$high_crime
# Cross-validation method
set.seed(100)
train_control <- trainControl(method = "cv", number = 10)
View(X)
rm(list=ls())
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Save features and target variable as X and y
X <- boston_df %>% dplyr::select(-crim, -high_crime)
y <- boston_df$high_crime
# Cross-validation method
set.seed(100)
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ ., data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
View(boston_df)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Save features and target variable as X and y
X <- boston_df %>% dplyr::select(-crim, -high_crime)
y <- boston_df$high_crime
# Cross-validation method
set.seed(100)
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ ., data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
logistic_model <- train(high_crime ~ -crim, data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model <- train(high_crime ~ .-crim, data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
logistic_model <- train(high_crime ~ .-crim, data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
logistic_model_results
logistic_model <- train(high_crime ~ .-crim, data = boston_df, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
logistic_model_results
lda_model <- train(high_crime ~ .-crim, data = boston_df, method = "lda", trControl = train_controll)
lda_model <- train(high_crime ~ .-crim, data = boston_df, method = "lda", trControl = train_control)
lda_model_results <- summary(lda_model)
qda_model <- train(high_crime ~ .-crim, data = boston_df, method = "qda", trControl = train_control)
qda_model_results <- summary(qda_model)
# Obtain predicted probabilities for each model
logistic_probs <- predict(logistic_model, newdata = boston_df, type = "prob")[, 2]
lda_probs <- predict(lda_model, newdata = boston_df, type = "response")
# Obtain predicted probabilities for each model
logistic_probs <- predict(logistic_model, newdata = boston_df, type = "prob")[, 2]
lda_probs <- predict(lda_model, newdata = boston_df, type = "raw")
qda_probs <- predict(qda_model, newdata = boston_df, type = "raw")
# Create ROC curves
logistic_roc <- roc(boston_df$high_crime, logistic_probs)
library(pROC)
# Obtain predicted probabilities for each model
logistic_probs <- predict(logistic_model, newdata = boston_df, type = "prob")[, 2]
lda_probs <- predict(lda_model, newdata = boston_df, type = "raw")
qda_probs <- predict(qda_model, newdata = boston_df, type = "raw")
# Create ROC curves
logistic_roc <- roc(boston_df$high_crime, logistic_probs)
lda_roc <- roc(boston_df$high_crime, lda_probs)
library(pROC)
# Obtain predicted probabilities for each model
logistic_probs <- predict(logistic_model, newdata = boston_df, type = "prob")[, 2]
lda_probs <- predict(lda_model, newdata = boston_df, type = "prob")
qda_probs <- predict(qda_model, newdata = boston_df, type = "prob")
# Create ROC curves
logistic_roc <- roc(boston_df$high_crime, logistic_probs)
lda_roc <- roc(boston_df$high_crime, lda_probs)
library(pROC)
# Obtain predicted probabilities for each model
logistic_probs <- predict(logistic_model, newdata = boston_df, type = "prob")[, 2]
lda_probs <- predict(lda_model, newdata = boston_df)$posterior[, 2]  # Extract probabilities of class membership
library(pROC)
log_prob<-predict(logistic_model,type=c("response"))
library(pROC)
log_prob<-predict(logistic_model,type=c("prob"))
boston_df$log_prob<-log_prob
g <- roc(high_crime ~ prob, data = boston_df)
library(pROC)
log_prob<-predict(logistic_model,type=c("probs"))
library(pROC)
log_prob<-predict(logistic_model,type="raw")
boston_df$log_prob<-log_prob
g <- roc(high_crime ~ prob, data = boston_df)
library(pROC)
log_prob<-predict(logistic_model,type="prob")
boston_df$log_prob<-log_prob
g <- roc(high_crime ~ log_prob, data = boston_df)
library(pROC)
log_prob<-predict(logistic_model,type="raw")
boston_df$log_prob<-log_prob
g <- roc(high_crime ~ log_prob, data = boston_df)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
credit_train = boston_df[index,]
credit_test = boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
boston_train <- boston_df[index,]
boston_test <- boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
lda_model_results <- summary(lda_model)
lda_model_results
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
qda_model_results <- summary(qda_model)
qda_model_results
library(ROCR)
install.packages('ROCR')
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="response")
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
library(ROCR)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="raw")
pred <- prediction(logistic_model, boston_test$high_crime)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- ifelse(boston_df$crim > med_crim, 1, 0)
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
boston_train <- boston_df[index,]
boston_test <- boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
boston_train <- boston_df[index,]
boston_test <- boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
lda_model_results <- summary(lda_model)
lda_model_results
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
qda_model_results <- summary(qda_model)
qda_model_results
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
boston_train <- boston_df[index,]
boston_test <- boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model_results <- summary(logistic_model)
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
lda_model_results <- summary(lda_model)
lda_model_results
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
qda_model_results <- summary(qda_model)
qda_model_results
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
View(pred_log)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred <- prediction(logistic_model, boston_test$high_crime)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred_obj <- prediction(pred_log[, "1"], boston_test$high_crime)
perf <- performance(pred_obj, "tpr", "fpr")
plot(perf, colorize=TRUE)
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred_obj <- prediction(pred_log[, "1"], boston_test$high_crime)
perf <- performance(pred_obj, "tpr", "fpr")
plot(perf, colorize=TRUE)
auc <- performance(pred_obj, "auc")
auc <- auc@y.values[[1]]
cat("Area under the curve (AUC) for Logistic Regression Model:", auc, "\n")
pred_lda <- predict(lda_model, newdata = boston_test)$posterior[, 2]
pred_lda <- predict(lda_model, newdata = boston_test,type="prob")
pred_obj_lda <- prediction(pred_lda, boston_test$high_crime)
View(pred_lda)
pred_lda <- predict(lda_model, newdata = boston_test,type="prob")
pred_obj_lda <- prediction(pred_lda, pred_lda[, "1"])
pred_lda <- predict(lda_model, newdata = boston_test,type="prob")
pred_obj_lda <- prediction(pred_lda[, "1"],boston_test$high_crime )
perf_lda <- performance(pred_obj_lda, "tpr", "fpr")
plot(perf_lda, main = "ROC Curve for LDA Model", col = "red", lwd = 2)
auc_lda <- performance(pred_obj_lda, "auc")
auc_lda <- auc_lda@y.values[[1]]
cat("Area under the curve (AUC) for LDA Model:", auc_lda, "\n")
pred_lda <- predict(lda_model, newdata = boston_test,type="prob")
pred_obj_lda <- prediction(pred_lda[, "1"],boston_test$high_crime )
perf_lda <- performance(pred_obj_lda, "tpr", "fpr")
plot(perf_lda, main = "ROC Curve for LDA Model", colorize = TRUE)
auc_lda <- performance(pred_obj_lda, "auc")
auc_lda <- auc_lda@y.values[[1]]
cat("Area under the curve (AUC) for LDA Model:", auc_lda, "\n")
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred_obj <- prediction(pred_log[, "1"], boston_test$high_crime)
perf <- performance(pred_obj, "tpr", "fpr")
plot(perf, main = "ROC Curve for LogReg Model", colorize=TRUE)
auc <- performance(pred_obj, "auc")
auc <- auc@y.values[[1]]
cat("Area under the curve (AUC) for Logistic Regression Model:", auc, "\n")
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="raw")
pred_obj <- prediction(pred_log[, "1"], boston_test$high_crime)
pred_log
library(ROCR)
pred_log<- predict(logistic_model, newdata = boston_test, type="prob")
pred_obj <- prediction(pred_log[, "1"], boston_test$high_crime)
perf <- performance(pred_obj, "tpr", "fpr")
plot(perf, main = "ROC Curve for LogReg Model", colorize=TRUE)
auc <- performance(pred_obj, "auc")
auc <- auc@y.values[[1]]
cat("Area under the curve (AUC) for Logistic Regression Model:", auc, "\n")
pred_qda <- predict(qda_model, newdata = boston_test,type="prob")
pred_obj_qda <- prediction(pred_qda[, "1"],boston_test$high_crime )
perf_qda <- performance(pred_obj_qda, "tpr", "fpr")
plot(perf_qda, main = "ROC Curve for LDA Model", colorize = TRUE)
auc_qda <- performance(pred_obj_qda, "auc")
auc_qda <- auc_qda@y.values[[1]]
cat("Area under the curve (AUC) for QDA Model:", auc_qda, "\n")
pred_qda <- predict(qda_model, newdata = boston_test,type="prob")
pred_obj_qda <- prediction(pred_qda[, "1"],boston_test$high_crime )
perf_qda <- performance(pred_obj_qda, "tpr", "fpr")
plot(perf_qda, main = "ROC Curve for QDA Model", colorize = TRUE)
auc_qda <- performance(pred_obj_qda, "auc")
auc_qda <- auc_qda@y.values[[1]]
cat("Area under the curve (AUC) for QDA Model:", auc_qda, "\n")
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model$results
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
lda_model$results
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
qda_mode$results
qda_model <- train(high_crime ~ .-crim, data = boston_train, method = "qda", trControl = train_control)
qda_model$results
library(ISLR)
df <- Auto
library(ISLR)
df <- Auto
mpg01 <- ifelse( df$mpg > median(df$mpg), yes = 1, no = 0)
df <- cbind(df, mpg01)
View(df)
library(ISLR)
df <- Auto
mpg01 <- ifelse( df$mpg > median(df$mpg), yes = 1, no = 0)
df <- cbind(df, mpg01)
head(df)
cor(df[,-9])
paris(df)
pairs(df)
library(ggplot2)
boxplot_data <- gather(df, key = "feature", value = "value", -mpg01)
ggplot(boxplot_data, aes(x = feature, y = value, fill = factor(mpg01))) +
geom_boxplot() +
labs(title = "Relationship between mpg01 and Features",
x = "Features", y = "Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs(df)
# I am going to normalize my data as well
Auto <- data.frame(mpg01, apply(cbind(cylinders, weight, displacement, horsepower, acceleration),
2, scale), year)
set.seed(100)
index <- sample(nrow(df),nrow(df)*0.80)
auto_train <- df[index,]
auto_test <- df[-index,]
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
# Loading packages and data
library(MASS)
library(caret)
library(tidyverse)
data(Boston)
boston_df <- as.data.frame(Boston)
# Making binary outcome
med_crim <- median(boston_df$crim)
boston_df$high_crime <- as.factor(ifelse(boston_df$crim > med_crim, 1, 0))
# Split into test and train
set.seed(100)
index <- sample(nrow(boston_df),nrow(boston_df)*0.80)
boston_train <- boston_df[index,]
boston_test <- boston_df[-index,]
# Cross-validation method
train_control <- trainControl(method = "cv", number = 10)
logistic_model <- train(high_crime ~ .-crim, data = boston_train, method = "glm", family = binomial(link = "logit"), trControl = train_control)
logistic_model$results
lda_model <- train(high_crime ~ .-crim, data = boston_train, method = "lda", trControl = train_control)
lda_model$results
rm(list=ls())
historic <- read.csv("./data/NABR_historic.csv")
View(historic)
library(dpylr)
library(dplyr)
historic <- read.csv("./data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual)
View(temp_annual)
library(dplyr)
historic <- read.csv("./data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(ncdf4)
install.packages("ncdf4")
library(ncdf4)
library(maps)
install.packages("maps")
library(ncdf4)
library(maps)
library(leaflet)
filename <- 'tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- nc_open(filename)
filename <- './data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- nc_open(filename)
filename <- './data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- nc_open(filename)
library(ncdf4)
library(maps)
library(leaflet)
library(raster)
filename <- './data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- nc_open(filename)
filename <- './data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- raster(filename)
filename <- 'data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- raster(filename)
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(dplyr)
historic <- read.csv("./data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
setwd("//wsl.localhost/Ubuntu/home/mcarswell/scholarship")
library(dplyr)
historic <- read.csv("./data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(ncdf4)
library(maps)
library(leaflet)
library(raster)
filename <- 'data/tas_Amon_CanESM5_historical_r10i1p2f1_gn_185001-201412.nc'
nc <- raster(filename)
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
library(dplyr)
historic <- read.csv("data/NABR_historic.csv")
temp_annual <- historic %>%
select(long,lat,year,T_Annual,T_Winter,T_Summer)
